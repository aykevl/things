#include <stdint.h>

static void bitbang_show_leds(uint8_t c1, uint8_t c2, uint8_t c3, uint8_t c4, uint8_t c5, uint8_t c6, volatile uint8_t *toggleBits) {
    uint8_t savedOut = *toggleBits;
    uint8_t i;
    __asm__ __volatile__(
        "clr __tmp_reg__\n\t"

        // 32 cycles
        "lsl %[c1]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c2]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c3]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c4]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c5]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c6]\n\t"
        "rol __tmp_reg__\n\t"
        "rol __tmp_reg__\n\t"
        "or __tmp_reg__, %[savedOut]\n\t"
        "out %[port], __tmp_reg__\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "out %[port], %[savedOut]\n\t"

        // 16 cycles
        "lsl %[c1]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c2]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c3]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c4]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c5]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c6]\n\t"
        "rol __tmp_reg__\n\t"
        "rol __tmp_reg__\n\t"
        "or __tmp_reg__, %[savedOut]\n\t"
        "out %[port], __tmp_reg__\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "out %[port], %[savedOut]\n\t"

        // 8 cycles
        "lsl %[c1]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c2]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c3]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c4]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c5]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c6]\n\t"
        "rol __tmp_reg__\n\t"
        "rol __tmp_reg__\n\t"
        "or __tmp_reg__, %[savedOut]\n\t"
        "out %[port], __tmp_reg__\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "out %[port], %[savedOut]\n\t"

        // 4 cycles
        "lsl %[c1]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c2]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c3]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c4]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c5]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c6]\n\t"
        "rol __tmp_reg__\n\t"
        "rol __tmp_reg__\n\t"
        "or __tmp_reg__, %[savedOut]\n\t"
        "out %[port], __tmp_reg__\n\t"
        "nop\n\t"
        "nop\n\t"
        "nop\n\t"
        "out %[port], %[savedOut]\n\t"

        // 2 cycles
        "lsl %[c1]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c2]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c3]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c4]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c5]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c6]\n\t"
        "rol __tmp_reg__\n\t"
        "rol __tmp_reg__\n\t"
        "or __tmp_reg__, %[savedOut]\n\t"
        "out %[port], __tmp_reg__\n\t"
        "nop\n\t"
        "out %[port], %[savedOut]\n\t"

        // 1 cycle
        "lsl %[c1]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c2]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c3]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c4]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c5]\n\t"
        "rol __tmp_reg__\n\t"
        "lsl %[c6]\n\t"
        "rol __tmp_reg__\n\t"
        "rol __tmp_reg__\n\t"
        "or __tmp_reg__, %[savedOut]\n\t"
        "out %[port], __tmp_reg__\n\t"
        "out %[port], %[savedOut]\n\t"
        : [c1]"+r"(c1),
          [c2]"+r"(c2),
          [c3]"+r"(c3),
          [c4]"+r"(c4),
          [c5]"+r"(c5),
          [c6]"+r"(c6)
        : [port]"I"(toggleBits),
          [savedOut]"r"(savedOut)
    );
    *toggleBits = savedOut;
}
